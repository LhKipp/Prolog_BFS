# GENEREAL INFO
# Compiler / Linker FLAG EXPLANATION
# --bind enable embind
# --emrun optimize for use with emrun (server to run the code)
# DISABLE_EXCEPTION_CATCHING=0 to allow exceptions *within* the c++ code to be caught.
#   Exceptions are disabled by default because of performance. We need them though.
# USE_BOOST_HEADERS=1 automatically retrieve the boost headers and include them
# MODULARIZE=1 prevent emscripten from polluting JS global scope. Put everything into EXPORT_NAME
# EXPORT_NAME specify the name of the namespace for MODULARIZE
# ALLOW_MEMORY_GROWTH Allow memory to grow to size defined by MAXIMUM_MEMORY
# -O3 optimizations
# preload-file: load normal files into .data file, so files can be used despite being in the browser

# Use "SHELL:" to prevent de-duplication of the -s flags! See
# https://stackoverflow.com/questions/60552844/how-do-i-migrate-from-compile-flags-to-target-compile-options-in-cmake/60553977#60553977

###########
# GENERAL #
###########
cmake_minimum_required(VERSION 3.13)
project(prolog_bfs)

# set where the build output should go
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)

set(CMAKE_CXX_STANDARD 17)

# general sources we always need
file(GLOB_RECURSE files_common
    "src/wasm/*"
    "src/wam/*.h"
    "src/wam/*.cpp"
)
list(REMOVE_ITEM files_common "${PROJECT_SOURCE_DIR}/src/wasm/test.cpp") # this is only used for test builds

# sourced we only need for testing
file(GLOB_RECURSE files_test
    "test/*"
)
list(APPEND files_test "src/wasm/test.cpp") # because we removed it above

#############
# DEV BUILD #
#############
add_executable(prolog_bfs_dev ${files_common})

# output name should always be prolog_bfs for wasm, so the .js file is always called the same way
set_target_properties(prolog_bfs_dev PROPERTIES OUTPUT_NAME "prolog_bfs")

#make include from src possible
target_include_directories(prolog_bfs_dev PRIVATE ${PROJECT_SOURCE_DIR}/src)

# compile options
#target_compile_options(prolog_bfs_dev PUBLIC -O3) # faster compilation without optimization
target_compile_options(prolog_bfs_dev PUBLIC "SHELL:-s USE_BOOST_HEADERS=1")
target_compile_options(prolog_bfs_dev PUBLIC "SHELL:-s DISABLE_EXCEPTION_CATCHING=0")

# link options
#target_link_options(prolog_bfs_dev PUBLIC -O3) # faster compilation without optimization
target_link_options(prolog_bfs_dev PUBLIC --bind)
target_link_options(prolog_bfs_dev PUBLIC --emrun)
target_link_options(prolog_bfs_dev PUBLIC "SHELL:-s USE_BOOST_HEADERS=1")
target_link_options(prolog_bfs_dev PUBLIC "SHELL:-s DISABLE_EXCEPTION_CATCHING=0")
target_link_options(prolog_bfs_dev PUBLIC "SHELL:-s MODULARIZE=1" "SHELL:-s EXPORT_NAME=\"'EmscriptenModule'\"")
target_link_options(prolog_bfs_dev PUBLIC "SHELL:-s ALLOW_MEMORY_GROWTH=1" "SHELL:-s MAXIMUM_MEMORY=500MB")


##############
# TEST BUILD #
##############
add_executable(prolog_bfs_test ${files_test} ${files_common})

# output name should always be prolog_bfs for wasm, so the .js file is always called the same way
set_target_properties(prolog_bfs_test PROPERTIES OUTPUT_NAME "prolog_bfs")

#make include from src possible
target_include_directories(prolog_bfs_test PRIVATE ${PROJECT_SOURCE_DIR}/src)

# compile options
target_compile_options(prolog_bfs_test PUBLIC -O3) # test if optimizations don't break anything
target_compile_options(prolog_bfs_test PUBLIC "SHELL:-s USE_BOOST_HEADERS=1")
target_compile_options(prolog_bfs_test PUBLIC "SHELL:-s DISABLE_EXCEPTION_CATCHING=0")

# link options
target_link_options(prolog_bfs_test PUBLIC -O3) # test if optimizations don't break anything
target_link_options(prolog_bfs_test PUBLIC --bind)
target_link_options(prolog_bfs_test PUBLIC --emrun)
target_link_options(prolog_bfs_test PUBLIC --preload-file test_src)
target_link_options(prolog_bfs_test PUBLIC "SHELL:-s USE_BOOST_HEADERS=1")
target_link_options(prolog_bfs_test PUBLIC "SHELL:-s DISABLE_EXCEPTION_CATCHING=0")
target_link_options(prolog_bfs_test PUBLIC "SHELL:-s MODULARIZE=1" "SHELL:-s EXPORT_NAME=\"'EmscriptenModule'\"")
target_link_options(prolog_bfs_test PUBLIC "SHELL:-s ALLOW_MEMORY_GROWTH=1" "SHELL:-s MAXIMUM_MEMORY=500MB")


####################
# PRODUCTION BUILD #
####################
add_executable(prolog_bfs_prod ${files_common})

# output name should always be prolog_bfs for wasm, so the .js file is always called the same way
set_target_properties(prolog_bfs_prod PROPERTIES OUTPUT_NAME "prolog_bfs")

#make include from src possible
target_include_directories(prolog_bfs_prod PRIVATE ${PROJECT_SOURCE_DIR}/src)

# compile options
target_compile_options(prolog_bfs_prod PUBLIC -O3)
target_compile_options(prolog_bfs_prod PUBLIC "SHELL:-s USE_BOOST_HEADERS=1")
target_compile_options(prolog_bfs_prod PUBLIC "SHELL:-s DISABLE_EXCEPTION_CATCHING=0")

# link options
target_link_options(prolog_bfs_prod PUBLIC -O3)
target_link_options(prolog_bfs_prod PUBLIC --bind)
target_link_options(prolog_bfs_prod PUBLIC "SHELL:-s USE_BOOST_HEADERS=1")
target_link_options(prolog_bfs_prod PUBLIC "SHELL:-s DISABLE_EXCEPTION_CATCHING=0")
target_link_options(prolog_bfs_prod PUBLIC "SHELL:-s MODULARIZE=1" "SHELL:-s EXPORT_NAME=\"'EmscriptenModule'\"")
target_link_options(prolog_bfs_prod PUBLIC "SHELL:-s ALLOW_MEMORY_GROWTH=1" "SHELL:-s MAXIMUM_MEMORY=500MB")